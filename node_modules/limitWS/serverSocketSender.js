"use strict";

// 依赖
const limit = require('limit');


class ServerSocketSender {
	constructor(message, props){
    	let me = this;
    	me.state = Object.assign({
			OP_CODE: 1, //操作码，0为继续，1为文本，2为二进制，8为关闭，9为ping，10为pong
    		LEG_CODE: null, //长度码，0，1，2
    		LENGTH: null, //数据长度
    		FIN_CODE: 1, //掩码，0为继续，1位开始
    		RSV_CODE: 0, //RSV码，作为扩展
    		MASK_CODE: 0 //密钥
    	}, props);
    	me.message = message;
    	me.setLengthCode();
	}
	setLengthCode(){
		let me = this;
		let {state, message} = me;
		let leg = state.LENGTH = Buffer.byteLength(message);
		if( leg <= 125 ){
			state.LEG_CODE = 0;
		}else if( leg <= 65535 ){
			state.LEG_CODE = 1;
		}else{
			state.LEG_CODE = 2;
		};
	}
	getBuffer(){
		let me = this;
		let arr = [
			me.getFC(),
			me.getSC()
		];
		let NC = me.getNC();
		if( NC ){
			arr = arr.concat(NC);
		};
		return Buffer.concat([new Buffer(arr), new Buffer(me.message)]);
	}
	// 解析第一个编码
	getFC(){
		let me = this;
		let {state} = me;
		let rsv = limit.from(new Array(state.RSV_CODE), () => {
			return '1';
		}).join('');
		rsv = limit.padEnd(rsv, 3, '0');
		let arr = [state.FIN_CODE, rsv, limit.padStart(state.OP_CODE.toString(2), 4, '0')];
		return parseInt(arr.join(''), 2);
	}
	// 解析第二个编码
	getSC(){
		let me = this;
		let {state} = me;
		let arr = [state.MASK_CODE];
		let numArr = [state.LENGTH, 126, 127];
		arr.push(numArr[state.LEG_CODE].toString(2));
		return parseInt(arr.join(''), 2);
	}
	// 获取长度编码
	getNC(){
		let me = this;
		let {state} = me;
		if( state.LEG_CODE === 1 ){
			return me.getNumberFromString( limit.padStart(state.LENGTH.toString(2), 16, '0') );
		}else if( state.LEG_CODE === 2 ){
			return me.getNumberFromString( limit.padStart(state.LENGTH.toString(2), 64, '0') );
		};
	}
	// 解析
	getNumberFromString(str){
		let guid = 0;
		let arr = [];
		let val = '';
		do{
			val = str.slice(guid * 8, ++guid * 8);
			val && arr.push(parseInt(val, 2));
		}while(val);
		return arr;
	}

};

module.exports = ServerSocketSender;





























