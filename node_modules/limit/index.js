"use strict";

// 依赖
const fs = require('fs');
const limit = require('./limit');
const mysql = require('./mysql');
const rootPath = limit.rootPath = getRootPath();
const serverConfig = require(`${rootPath}/config`);

// 日志过期时间
const Expired = 7 * 24 * 60 * 60 * 1000; // 一周
// const Expired = 1000; // 测试用的1秒
const logUrl = `${rootPath}${serverConfig.errorLogPath}`; //地址

limit.createMySql = function(props){
	let SQL = new mysql(props);
	limit.SQL = SQL;
	return SQL;
};

// 映射
['err', 'inf', 'war'].forEach((val) => {
	let key = val.toUpperCase();
	let fn = limit[val];
	limit[key] = function(){
		let logMsg = [...arguments];
		readLog().then((stat) => {
			// 检测log是否过期
			if( new Date().getTime() - new Date(stat.birthtime).getTime() > Expired ){
				return deleLog();
			};
		}).then(() => {
			return appLog([key, `[${limit.limit.formatDate()}]`, ':', logMsg.join(','), '\n'].join(''));
		}).then(() => {
			fn(...logMsg);
		}).catch((e) => {
			console.log(e);
			// 如果错误[unlink]发生 重新尝试
			if( e.syscall === 'unlink' ){
				limit[key](...logMsg);
			};
		});
	};
});
// 读取文件状态
function readLog(){
	return new Promise((resolve, reject) => {
		fs.stat(logUrl, (err, stat) => {
			if(err){
				reject(err);
			}else{
				resolve(stat);
			};
		});
	});
};
// 删除文件
function deleLog(){
	return new Promise((resolve, reject) => {
		fs.unlink(logUrl, (err) => {
			if(err){
				reject(err);
			}else{
				resolve();
			};
		});
	});
};
// 往后追加信息
function appLog(str){
	return new Promise((resolve, reject) => {
		fs.appendFile(logUrl, str, (err) => {
			if(err){
				reject(err);
			}else{
				resolve();
			};
		});
	});
};
// 获取根目录
function getRootPath(){
	return __dirname.split('node_modules')[0];
};

module.exports = limit;