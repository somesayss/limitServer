"use strict";

// 依赖
const fs = require('fs');
const url = require('url');
const limit = require('limit');
const querystring = require('querystring');
const RequestParseBufferParse = require('./requestParseBufferParse');

class RequestParse {
	constructor(handle){
		let me = this;
		me.request = handle.request;
		me.response = handle.response;
		return me.requestEvent();
	}
	// 绑定请求
	requestEvent(){
		let me = this;
		return new Promise((resolve, reject) => {
			let BufferList = [];
			let request = me.request;
			let parseType = me.parseType();
			let type = parseType.type;
			me.getHeaderInfo();
			if( type === 'multipart/form-data' ){
				new RequestParseBufferParse(request, parseType.boundary).then((data) => {
					me.getBaseInfo(data);
					resolve(me);
				});
			}else{
				request.on('data', (data) => {
					BufferList.push(data);
				}).on('end', () => {
					me.getBaseInfo( Buffer.concat(BufferList).toString() );
					resolve(me);
				}).on('error', (e) => {
					reject(e);
				});
			};
		});
	}
	// 获取参数
	getParam(){
		let me = this;
		let baseInfo = me.baseInfo;
		let headerInfo = me.headerInfo;
		return {baseInfo, headerInfo};
	}
	// 解析类型
	parseType(){
		let me = this;
		let request = me.request;
		let headersType = request.headers['content-type'];
		let type = headersType || 'application/x-www-form-urlencoded';
		return querystring.parse(`type=${type}`, '; ', '=');
	}
	// 判断是否是POST请求
	isPost(){
		let me = this;
		let request = me.request;
		return request.method === 'POST';
	}
	// 获取请求头
	getHeaderInfo(){
		let me = this;
		let request = me.request;
		me.headerInfo = request.headers;
	}
	// 基础信息,URL[地址],method[方法]
	getBaseInfo(query){
		let me = this;
		let request = me.request;
		let baseInfo = me.baseInfo = {};
		limit.log('请求地址:', request.url, '请求方法:', request.method);
		if(request.url === '/'){
			request.url = '/index.html';
		};
		let urlParse = url.parse(request.url);
		baseInfo.url = `.${urlParse.pathname}`;
		baseInfo.method = request.method;
		if( me.isPost() ){
			if( Array.isArray(query) ){
				let param = {};
				let files = [];
				query.forEach((val, key) => {
					param[val.name] = val.val;
					if( val.originFilename ){
						files.push(val);
					};
				});
				baseInfo.query = querystring.stringify(param);
				baseInfo.param = param;
				baseInfo.files = files;
			}else{
				baseInfo.query = query;
				baseInfo.param = querystring.parse(baseInfo.query);
			};
		}else{
			baseInfo.query = urlParse.query || '';
			baseInfo.param = querystring.parse(baseInfo.query);
		};
		limit.log('解析的baseInfo:', baseInfo);
	}
};

module.exports = RequestParse;