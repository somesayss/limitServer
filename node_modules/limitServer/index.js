"use strict";

// 依赖
const fs = require('fs');
const http = require('http');
const limit = require('limit');
const RequestParse = require('./requestParse');
const serverStatic = require('./serverStatic');
const serverModule = require('./serverModule');
const serverConfig = require(`${limit.rootPath}/config`);

// 变量
const server = {};

// 入参检查
function setArg(arg, dev){
	return arg === void 0 ? dev : arg;
};

// 创建服务
function createServer(cb, ip, port){
	limit.log(`监听地址:${ip}:${port}`);
	return http.createServer((request, response) => {
		return cb( Promise.resolve({request, response}) );
	}).listen(port, ip);
};

// 响应
function responseHandle(handle){
	let server = new serverModule(handle);
	// 静态动态的分离
	if( server.isSuccessRequire() ){
		server.render();
	}else{
		new serverStatic(handle);
	};
};

// 系统初始化
function sysSelfTest(){
	let filePath = `${limit.rootPath}${serverConfig.filePath}`;
	// 上传文件目录
	if( !fs.existsSync(filePath) ){
		limit.log(`creat ${filePath}`);
		fs.mkdirSync(filePath);
	};
	let errorLogPath = `${limit.rootPath}${serverConfig.errorLogPath}`;
	// 错误日志
	if( !fs.existsSync(errorLogPath) ){
		limit.log(`creat ${errorLogPath}`);
		fs.writeFileSync(errorLogPath, '');	
	};
};

// 启动HTTP服务
server.http = (ip, port) => {
	sysSelfTest();
	return createServer((promise) => {
		promise.then( (handle) => new RequestParse(handle) )
			.then(responseHandle)
			.catch( e => console.error('错误', e) );
	}, setArg(ip, '0.0.0.0'), setArg(port, '8080'));
};

module.exports = server;