"use strict";

// 依赖
const limit = require('limit');
const Server = require('./server');
const serverModuleTemplate = require('./serverModuleTemplate');

// 简单的路由规则
const RouterMap = [{
	rule: /(.+).json$/,
	moduleName: 'rpc',
	renderName: 'renderJson'
},{
	rule: /(.+).htm$/,
	moduleName: 'screen',
	renderName: 'renderHtml'
},{
	rule: /(.+).jsonp$/,
	moduleName: 'rpc',
	renderName: 'renderJsonp'
},{
	rule: /(.+).do$/,
	moduleName: 'rpc',
	renderName: 'renderDo'
}];

// 响应头
const Header = {
	'rpc': {
		'Content-Type': 'application/json; charset=utf-8'
	},
	'screen': {
		'Content-Type': 'text/html; charset=utf-8'
	}
};

class ModuleServer extends Server{
	constructor(handle){
		super(...arguments);
		let me = this;
		me.handle = handle;
		me.parsePath();
	}
	// 不同后缀的不同处理
	render(){
		let me = this;
		let handle = me.handle;
		// renderDo 使用原生的response
		if( me.renderName === 'renderDo' ){
			return 	new me.module(handle);
		};
		let renderFun = me[me.renderName];
		if( renderFun ){
			me.promiseRender().then((mainObj) => {
				handle.response.writeHead( 200, Object.assign(Header[me.moduleName], mainObj.header) );
				return renderFun.call(me, mainObj.context, mainObj.response);
			}, (errMsg) => {
				handle.response.writeHead( 200, Header[me.moduleName] );
				return renderFun.call(me, null, null, errMsg);
			});
		}else{
			return me.render404(`${me.renderName} not find`);
		};
	}
	// promise封装
	promiseRender(){
		let me = this;
		let handle = me.handle;
		return new Promise((resolve, reject) => {
			try{
				Promise.resolve( new me.module( handle.getParam() ) ).then((mainObj) => {
					resolve(mainObj);
				}, (errMsg) => {
					reject(errMsg);
				});
			}catch(e){
				reject(`error: ${e}`);
			};
		});
	}
	// .json[rpc]
	renderJson(context, res, errMsg){
		let me = this;
		let handle = me.handle;
		let response = handle.response;
		// 错误处理
		if( errMsg ){
			response.end( JSON.stringify( {hasError: true, message: errMsg} ) );
		}else{
			if( res ){
				try{
					response.end(res);
				}catch(e){
					response.end(JSON.stringify( {hasError: true, message: `error: ${e}`} ));
				};
			}else{
				response.end( JSON.stringify( {hasError: false, content: context} ) );
			};
		};
	}
	// .jsonp[rpc]
	renderJsonp(context, res, errMsg){
		let me = this;
		let handle = me.handle;
		let param = handle.baseInfo.param;
		let callbackName = param.callback
		let response = handle.response;
		if( !callbackName ){
			return response.end( `can not find callBackName` );
		};
		// 错误处理
		if( errMsg ){
			response.end( `${ callbackName}( ${ JSON.stringify( {hasError: true, message: errMsg} ) } )` );
		}else{
			if( res ){
				response.end( `${ callbackName}( ${ res } )` );
			}else{
				response.end( `${ callbackName}( ${ JSON.stringify( {hasError: false, content: context} ) } ) ` );
			};
		};
	}
	// .htm[screen]
	renderHtml(context, res, errMsg){
		console.log(arguments);
		let me = this;
		let handle = me.handle;
		let response = handle.response;
		if( errMsg ){
			limit.err(errMsg);
		};
		response.end( me.viewCompile(context) );
	}
	// 依赖响应的模块
	requireModlue(){
		let me = this;
		let path = `${limit.rootPath}${me.cutPath('module')}`;
		try{
			me.module = require(path);
		}catch(e){
			limit.war(`${path} can not find`);
			return false;
		};
		return true;
	}
	// 依赖模板的模块
	requireTemplate(){
		let me = this;
		if( me.moduleName === 'screen' ){
			let path = `${limit.rootPath}${me.cutPath('templates')}.ejs`;
			try{
				me.viewCompile = new serverModuleTemplate(path);
				return true;
			}catch(e){
				me.viewCompile = () => `${path} can not find`;
				limit.war(`${path} can not find`);
			};
		};
		return false;
	}
	// 解析相应的路径
	parsePath(){
		let me = this;
		let handle = me.handle;
		let baseInfo = handle.baseInfo;
		let url = baseInfo.url;
		let rule;
		let moduleName;
		let renderName;
		RouterMap.some((val) => {
			if( val.rule.test(url) ){
				moduleName = val.moduleName;
				renderName = val.renderName;
				rule = val.rule;
				return true;
			};
		});
		if(moduleName){
			me.moduleName = moduleName;
			me.renderName = renderName;
			me.urlMatch = url.match(rule)[1];
		};
	}
	// 是否依赖成功
	isSuccessRequire(){
		let me = this;
		let moduleName = me.moduleName;
		if( moduleName ){
			let isRM = me.requireModlue();
			let isRT = me.requireTemplate();
			return isRM || isRT;
		}else{
			return false;
		};
	}
	// 剪切路径，进行后期拼接
	cutPath(name){
		let me = this;
		let urlMatch = me.urlMatch;
		urlMatch = urlMatch.split('/');
		// 第二个位置插入modlue
		urlMatch.splice(1, 0, name);
		// 到处第二个位置插入 rpc 或者 screen
		urlMatch.splice(urlMatch.length-1, 0, me.moduleName);
		// 把第一个位置变成 ..
		urlMatch.shift();
		return urlMatch.join('/');
	}
};

module.exports = ModuleServer;