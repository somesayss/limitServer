"use strict";

// 备注资料
// [缓存机制]http://www.laruence.com/2010/03/05/1332.html

// 依赖
const fs = require('fs');
const path = require('path');
const Server = require('./server');
const serverStaticContentTypes = require('./serverStaticContentTypes');

class StaticServer extends Server{
	constructor(handle){
		super(...arguments);
		let me = this;
		me.handle = handle;
		me.fsExists()
			.then( () => me.fsStat() )
			.then( () => me.readFile() )
			.then( () => me.render() )
			.catch( (e) => me.render404(e) );
	}
	fsExists(){
		let me = this;
		let handle = me.handle;
		let baseInfo = handle.baseInfo;
		return new Promise((resolve, reject) => {
			fs.exists(baseInfo.url, (isExists) => {
				if(isExists){
					resolve();
				}else{
					reject(`${baseInfo.url} not found`);
				};
			});
		});
	}
	fsStat(){
		let me = this;
		let handle = me.handle;
		let baseInfo = handle.baseInfo;
		return new Promise((resolve, reject) => {
			fs.stat(baseInfo.url, (err, stat) => {
				if(err){
					reject(err);
				}else{
					me.stat = stat;
					resolve();
				};
			});
		});
	}
	readFile(){
		let me = this;
		let handle = me.handle;
		let baseInfo = handle.baseInfo;
		let modified = handle.request.headers['if-modified-since'];
		if(modified !== me.stat.mtime.toUTCString()){
			return new Promise((resolve, reject) => {
				me.stream = fs.createReadStream(baseInfo.url);
				resolve();
				// fs.readFile(baseInfo.url, 'binary', (err, file) => {
				// 	if(err){
				// 		reject(err);
				// 	}else{
				// 		me.file = file;
				// 		resolve();
				// 	};
				// });
			});
		};
	}
	render(){
		let me = this;
		let handle = me.handle;
		let response = handle.response;
		if(me.stream){
			let time = 31536000;//60*60*24*365;
			let expires = new Date();
			expires.setTime(expires.getTime() + time*1000);
			response.writeHead(200, {
				'Content-Type': `${serverStaticContentTypes[me.getExtName()]}; charset=utf-8`,
				'Expires': expires.toUTCString(),
				'Cache-Control': `max-age=${time}`,
				'Conent-Length': me.stat.size,
				'Last-Modified': me.stat.mtime.toUTCString()
			});
	        me.stream.pipe(response);
	        // response.end(me.file, 'binary');
		}else{
			me.render304();
		};
	}
	getExtName(){
		let me = this;
		let handle = me.handle;
		let baseInfo = handle.baseInfo;
		return path.extname(baseInfo.url).slice(1) || 'html';
	}
};

module.exports = StaticServer;